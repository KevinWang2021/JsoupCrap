<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tech.pariote</groupId>
    <artifactId>JsoupCrap</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--打包机制，如pom,jar,maven-plugin,ejb,war,ear,rar,par-->
    <packaging>jar</packaging>
    <!--用户描述项目的名称，无关紧要的东西-->
    <name>Jsoup</name>
    <!--写明开发团队的网站，无关紧要-->
    <!--    <url></url>-->
    <!-- ####################### 环境设置 ###################### -->
    <properties>
        <!-- 项目执行脚本目录 -->
        <project.script.execute.directory>src/main/scripts/execute</project.script.execute.directory>
        <!-- 项目说明文档目录 -->
        <project.document.directory>document</project.document.directory>
        <!-- 项目配置文件目录 -->
        <project.config.directory>src/main/resources</project.config.directory>
        <!-- 项目编码 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- 本地编译JDK版本 -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <!-- 项目部署JDK版本 -->
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

<!--    <repositories>-->
<!--        &lt;!&ndash; 阿里云仓库,配置Maven仓库，速度快配置在最前面 &ndash;&gt;-->
<!--        <repository>-->
<!--            <id>aliyun</id>-->
<!--            <url>http://maven.aliyun.com/nexus/content/groups/public</url>-->
<!--        </repository>-->
<!--        &lt;!&ndash; 国内备选仓库 &ndash;&gt;-->
<!--        <repository>-->
<!--            <id>repo2</id>-->
<!--            <url>http://repo2.maven.org/maven2/</url>-->
<!--        </repository>-->

<!--        &lt;!&ndash; Cloudera仓库,如果在阿里云仓库里找不到去Cloudera的仓库里找，主要是CDH版本Hadoop依赖的jar &ndash;&gt;-->
<!--        <repository>-->
<!--            <id>cloudera</id>-->
<!--            <url>https://repository.cloudera.com/artifactory/cloudera-repos/</url>-->
<!--        </repository>-->

<!--        &lt;!&ndash; Scala仓库,如果前面两个都找不到来仓库找，如果此仓库也找不到，去中央仓库找 &ndash;&gt;-->
<!--        <repository>-->
<!--            <id>scala-tools.org</id>-->
<!--            <name>Scala-Tools Maven2 Repository</name>-->
<!--            <url>http://scala-tools.org/repo-releases</url>-->
<!--        </repository>-->
<!--    </repositories>-->

    <dependencies>
        <dependency>
            <!-- jsoup HTML parser library @ https://jsoup.org/ -->
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.14.1</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>

        <!-- 解决家庭网络下载问题 -->
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-site-plugin</artifactId>
            <version>3.8.2</version>
        </dependency>
        <!-- 解决家庭网络下载问题 -->
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>3.1.0</version>
        </dependency>


    </dependencies>

    <build>
        <finalName>jsoup</finalName>
        <plugins>
            <!-- The configuration of maven-jar-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <!-- 对要打的jar包进行配置 -->
                <configuration>
                    <!-- Configuration of the archiver -->
                    <archive>
                        <!--生成的jar中，不要包含pom.xml和pom.properties这两个文件-->
                        <addMavenDescriptor>false</addMavenDescriptor>

                        <!-- Manifest specific configuration -->
                        <manifest>
                            <!--是否要把第三方jar放到manifest的classpath中-->
                            <addClasspath>true</addClasspath>

                            <!--
                            生成的manifest中classpath的前缀，
                            因为要把第三方jar放到lib目录下，
                            所以classpath的前缀是lib/
                            -->
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                    </archive>
                    <!--过滤掉不希望包含在jar中的文件-->
                    <excludes>
                        <!-- 排除不需要的文件夹(路径是jar包内部的路径) -->
                        <exclude>**/assembly/</exclude>
                    </excludes>
                </configuration>
            </plugin>



            <!-- The configuration of maven-assembly-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4</version>
                <!-- 对项目的组装进行配置 -->
                <configuration>
                    <!-- 指定assembly插件的配置文件所在位置 -->
                    <descriptors>
                        <descriptor>src/main/resources/assembly/package.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <!-- 将组装绑定到maven生命周期的哪一阶段 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 指定assembly插件的打包方式-->
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>